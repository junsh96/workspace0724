----1----------------

-- 춘 기술 대학교의 학과 이름과 계열 표시 단 출력 헤더는 학과 명, 계열로 표기
SELECT DEPARTMENT_NAME AS "학과 명",
        CATEGORY AS "계열" 
FROM TB_DEPARTMENT;

-- 학과의 학과 정원을 출력
SELECT DEPARTMENT_NAME || '의 정원은' || CAPACITY || '명 입니다.' 
FROM TB_DEPARTMENT;

-- 국어 국문학과에 다니는 여학생중 현재 휴학생인 학생은
SELECT * FROM TB_DEPARTMENT; -- 001

SELECT STUDENT_NAME 
FROM TB_STUDENT 
JOIN TB_DEPARTMENT 
USING(DEPARTMENT_NO) 
WHERE DEPARTMENT_NO = 001 
AND SUBSTR(STUDENT_SSN, 8, 1) = 2
AND ABSENCE_YN = 'Y';

-- 도서관 장기 연체자들 이름  -- 학번 : A513079,A513090,A513091,A513110,A513119
SELECT STUDENT_NAME 
FROM TB_STUDENT 
WHERE STUDENT_NO IN('A513079','A513090','A513091','A513110','A513119');

-- 입학정원이 20명 이상 30명 이하인 학과들의 학과 이름과 계열 출력
SELECT DEPARTMENT_NAME,
        CATEGORY
FROM TB_DEPARTMENT
WHERE CAPACITY BETWEEN 20 AND 30;

-- 소속 학과를 가지고있지 않은 총장의 이름.
SELECT PROFESSOR_NAME
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO IS NULL;

-- 학과가 지정되지 않은 학생
SELECT STUDENT_NO, 
        STUDENT_NAME
FROM TB_STUDENT
WHERE DEPARTMENT_NO IS NULL;

--선수 과목이 존재하는 과목의 과목 번호
SELECT CLASS_NO
FROM TB_CLASS
WHERE PREATTENDING_CLASS_NO IS NOT NULL;

-- 대학에 존재하는 계열
SELECT DISTINCT(CATEGORY)
FROM TB_DEPARTMENT;

----02 학번 전주 거주자들 휴학자 제외 학번 이름 주민번호
SELECT STUDENT_NO,
        STUDENT_NAME,
        STUDENT_SSN
FROM TB_STUDENT
WHERE SUBSTR(ENTRANCE_DATE,1,2) = 02
AND STUDENT_ADDRESS LIKE '%전주%'
AND ABSENCE_YN = 'N';

SELECT STUDENT_NO, STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE EXTRACT(YEAR FROM ENTRANCE_DATE) = 2002
      AND STUDENT_ADDRESS LIKE '%전주%'
      AND ABSENCE_YN = 'N';


------2----------------

-- 영어 영문학과 학생들의 학번 이름 입학년도를 입학년도가 빠른 순
SELECT STUDENT_NO AS "학번",
        STUDENT_NAME AS "이름",
        TO_CHAR(ENTRANCE_DATE, 'YYYY-MM-DD') AS "입학년도"
FROM TB_STUDENT
WHERE DEPARTMENT_NO = '002'
ORDER BY ENTRANCE_DATE;

-- 이름이 세글자가 아닌 교수의 이름 주민번호
SELECT PROFESSOR_NAME,
        PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE LENGTH(PROFESSOR_NAME) != 3;

-- 남자 교수들의 이름과 나이를 출력 나이 적은순
SELECT PROFESSOR_NAME AS "교수이름",
        ROUND((SYSDATE - TO_DATE(19||SUBSTR(PROFESSOR_SSN,0,6)))/365) AS "나이"
FROM TB_PROFESSOR
WHERE SUBSTR(PROFESSOR_SSN,8,1) = '1'
ORDER BY "나이" ASC;

--교수들 이름중 성 제거
SELECT SUBSTR(PROFESSOR_NAME,2) AS "이름"
FROM TB_PROFESSOR;

--재수생 입학자
SELECT STUDENT_NO,
        STUDENT_NAME
FROM TB_STUDENT
WHERE ROUND((ENTRANCE_DATE - TO_DATE(SUBSTR(STUDENT_SSN,0,6)))/365) > 19
ORDER BY 1;

SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE EXTRACT(YEAR FROM ENTRANCE_DATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(STUDENT_SSN, 1, 6))) > 19
ORDER BY 1;

--2020의 크리스마스의 요일
SELECT DECODE(TO_CHAR(TO_DATE('2020/12/25'),'D'),1,'일',2,'월',3,'화',4,'수',5,'목',6,'금',7,'토') FROM DUAL;

--TO_DATE('99/10/11', 'YY/MM/DD') / TO_DATE('49/10/11','YYMMDD') / TO_DATE('99/10/11', 'RR/MM/DD') / TO_DATE('49/10/11','RRMMDD')
SELECT TO_DATE('99/10/11', 'YY/MM/DD') , 
        TO_DATE('49/10/11','YY/MM/DD'), 
        TO_DATE('99/10/11', 'RR/MM/DD') ,
        TO_DATE('49/10/11','RR/MM/DD')
FROM DUAL;

--2000년도 이후 학번은 A 2000년도 이전 학생들의 학번 이름
SELECT STUDENT_NO,
        STUDENT_NAME
FROM TB_STUDENT
WHERE SUBSTR(STUDENT_NO,1,1) !='A';

-- 학번 A517178인 한아름 학생의학점 총 점 반올림소수점 한자리까지
SELECT ROUND(SUM(POINT),1) AS   "평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A517178';

-- 학과별 학생수를 구하여 학과번호 학생수(명) 헤더로 출력 --------------------------------보류
SELECT DEPARTMENT_NO AS "학과번호"
FROM TB_DEPARTMENT;

SELECT * FROM TB_DEPARTMENT
JOIN TB_CLASS
USING(DEPARTMENT_NO)CC
JOIN TB_GRADE
USING(CLASS_NO);


SELECT CLASS_NO,CLASS_NAME,COUNT(*) AS 누적수강생
FROM TB_GRADE
JOIN TB_CLASS
USING(CLASS_NO)
WHERE SUBSTR(TERM_NO,1,4) = (SELECT MAX(SUBSTR(TERM_NO,1,4)) FROM TB_GRADE)
GROUP BY CLASS_NO,CLASS_NAME;

SELECT DEPARTMENT_NO,COUNT(*) AS 누적수강생
FROM TB_GRADE
JOIN TB_CLASS
USING(CLASS_NO)
JOIN TB_DEPARTMENT
USING(DEPARTMENT_NO)
WHERE SUBSTR(TERM_NO,1,4) = (SELECT MAX(SUBSTR(TERM_NO,1,4)) FROM TB_GRADE)
GROUP BY DEPARTMENT_NO;

SELECT DEPARTMENT_NO, COUNT(*)
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY 1;

--지도 교수를 배정받지 못한 학생의 수
SELECT COUNT(*) FROM TB_STUDENT WHERE COACH_PROFESSOR_NO IS NULL;

--학번이 A112113인 학생의 년도별 평점 반올림하여 소수점 한자리
SELECT SUBSTR(TERM_NO,1,4) AS "년도",
        ROUND(AVG(POINT),1) AS "년도별 평점"
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO,1,4),STUDENT_NO;

-- 학과별  휴학생수 
SELECT DEPARTMENT_NO,COUNT(*)
FROM TB_DEPARTMENT
JOIN TB_STUDENT
USING(DEPARTMENT_NO)
WHERE ABSENCE_YN ='Y'
GROUP BY DEPARTMENT_NO
ORDER BY DEPARTMENT_NO;

SELECT DEPARTMENT_NO 학과코드명, COUNT(DECODE(ABSENCE_YN, 'Y', 1)) "휴학생 수"
FROM TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY 1;

-- 대학 학생중 동명이인수
SELECT STUDENT_NAME,
        COUNT(*) 
FROM TB_STUDENT
GROUP BY STUDENT_NAME
HAVING COUNT(*) > 1
ORDER BY 1;

-- 학번이 A112113학생 년도, 학기별 /평점 /년도별 누적 평점 /총평점

SELECT SUBSTR(TERM_NO,1,4) AS "년도",
        SUBSTR(TERM_NO,5,2) AS "학기",
        POINT AS "평점"
FROM TB_GRADE 
WHERE STUDENT_NO = 'A112113'
UNION
SELECT SUBSTR(TERM_NO,1,4) AS "년도",
        '' AS "학기",
        AVG(POINT) AS "평점"
FROM TB_GRADE
GROUP BY SUBSTR(TERM_NO,1,4),STUDENT_NO
HAVING STUDENT_NO = 'A112113'
ORDER BY "년도";

SELECT SUBSTR(TERM_NO, 1, 4) �⵵, SUBSTR(TERM_NO, 5, 2) �б�, ROUND(AVG(POINT), 1) ���
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY ROLLUP(SUBSTR(TERM_NO, 1, 4), SUBSTR(TERM_NO, 5, 2))
ORDER BY 1; 


------3---------------------------
--학생 이름과 주소지
SELECT STUDENT_NAME AS "학생 이름",
        STUDENT_ADDRESS AS "주소지"
FROM TB_STUDENT
ORDER BY STUDENT_NAME;

--휴학중인 학생 나이 적은순으로 이름 주민번호
SELECT STUDENT_NAME,
        STUDENT_SSN
FROM TB_STUDENT
WHERE ABSENCE_YN = 'Y'
ORDER BY (SYSDATE - TO_DATE(SUBSTR(STUDENT_SSN,1,6)))/365;

--주소지가 강원도나 경기도인 학생중 1900년대 학번을 가진 학생 이름 학번 주소  이름 오름차순
SELECT STUDENT_NAME AS "학생이름",
        STUDENT_NO AS "학번",
        STUDENT_ADDRESS AS "거주지 주소" 
FROM TB_STUDENT
WHERE SUBSTR(STUDENT_NO,1,1) !='A' 
AND STUDENT_ADDRESS LIKE '%경기%' 
OR STUDENT_ADDRESS LIKE '%강원%'
ORDER BY STUDENT_NAME;

--법학과 교수중 가장 나이가 많은 사람부터 확인
SELECT PROFESSOR_NAME,
        PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO = 005
ORDER BY PROFESSOR_SSN;

--2004년 2학기에 C3118100 과목을 수강한 학생의 학점 학점이 높은 학생부터 표기 학점이 같으명 학번이 낮은학생부터
SELECT STUDENT_NO,
        POINT
FROM TB_GRADE
WHERE CLASS_NO = 'C3118100'
AND TERM_NO = '200402'
ORDER BY POINT DESC,STUDENT_NO;

--학생 번호, 학생이름, 학과이름 학생이름으로 오름차순
SELECT STUDENT_NO,
        STUDENT_NAME,
        DEPARTMENT_NAME
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
ORDER BY STUDENT_NAME;

-- 학교의 과목이름과 과목의 학과 출력
SELECT CLASS_NAME,
        DEPARTMENT_NAME
FROM TB_CLASS
JOIN TB_DEPARTMENT
USING(DEPARTMENT_NO);

-- 과목별 교수 이름 
SELECT CLASS_NAME,
        PROFESSOR_NAME
FROM TB_PROFESSOR
JOIN TB_CLASS_PROFESSOR
USING(PROFESSOR_NO)
JOIN TB_CLASS
USING(CLASS_NO);


-- 위 코드의 인문사회 계열 교수의 과목이름과 교수명
SELECT CLASS_NAME,
        PROFESSOR_NAME
FROM TB_PROFESSOR
JOIN TB_CLASS_PROFESSOR
USING(PROFESSOR_NO)
JOIN TB_CLASS A
USING(CLASS_NO)
JOIN TB_DEPARTMENT B
ON A.DEPARTMENT_NO = B.DEPARTMENT_NO
WHERE CATEGORY = '인문사회';

-- 음악학과 학생들의 학번, 학생이름, 전체 평점
SELECT STUDENT_NO AS 학번,
        STUDENT_NAME AS 학생이름,
        ROUND(AVG(POINT),1) AS 전체평점
FROM TB_STUDENT
JOIN TB_GRADE
USING(STUDENT_NO)
WHERE DEPARTMENT_NO = (SELECT DEPARTMENT_NO FROM TB_DEPARTMENT WHERE DEPARTMENT_NAME = '음악학과')
GROUP BY STUDENT_NO,STUDENT_NAME;

--학번이 A313047학생의 학과 이름,학생이름,지도교수 이름
SELECT B.DEPARTMENT_NAME AS "학과 이름",
        A.STUDENT_NAME AS "학생이름",
        C.PROFESSOR_NAME AS "지도교수 이름"
FROM TB_STUDENT A
JOIN TB_DEPARTMENT B
ON A.DEPARTMENT_NO = B.DEPARTMENT_NO
JOIN TB_PROFESSOR C
ON A.COACH_PROFESSOR_NO = C.PROFESSOR_NO
WHERE A.STUDENT_NO = 'A313047';

--2007년에 인간관계론 과목을 수강한 학생을 찾아 학생이름과 수강학기를 표기
SELECT STUDENT_NAME,
        TERM_NO
FROM TB_STUDENT
JOIN TB_GRADE
USING(STUDENT_NO)
JOIN TB_CLASS
USING(CLASS_NO)
WHERE CLASS_NAME = '인간관계론'
AND SUBSTR(TERM_NO,1,4) = 2007;

SELECT * FROM TB_CLASS WHERE CLASS_NAME='인간관계론';

--예체능 계열 과목중 담당교수를 한명도 배정받지 못한 과목 이름 학과명 
SELECT CLASS_NAME,
        DEPARTMENT_NAME
FROM TB_CLASS
JOIN TB_DEPARTMENT
USING(DEPARTMENT_NO)
LEFT OUTER JOIN TB_CLASS_PROFESSOR
USING(CLASS_NO)
WHERE CATEGORY = '예체능'
AND PROFESSOR_NO IS NULL;

SELECT * FROM TB_DEPARTMENT WHERE CATEGORY = '예체능';

--서반아어학과 학생들의 지도교수 개시 학생이름과 지도교수 이름을 찾고 지도교수가 없는 경우 지도교수 미지정
SELECT STUDENT_NAME AS 학생이름,
        NVL(PROFESSOR_NAME,'지도 교수 미지정') AS 지도교수
FROM TB_STUDENT
JOIN TB_DEPARTMENT
USING(DEPARTMENT_NO)
JOIN TB_PROFESSOR
ON COACH_PROFESSOR_NO = PROFESSOR_NO
WHERE DEPARTMENT_NAME = '서반아어학과';
 
SELECT * FROM TB_DEPARTMENT WHERE DEPARTMENT_NAME = '서반아어학과';

--휴학생이 아닌 학생중 평점이 4.0이상인 학생의 학번 이름 학과이름 평점

SELECT STUDENT_NO,
        STUDENT_NAME,
        DEPARTMENT_NAME,
        AVG(POINT) AS 평점
FROM TB_STUDENT
JOIN TB_DEPARTMENT
USING(DEPARTMENT_NO)
JOIN TB_GRADE
USING(STUDENT_NO)
WHERE ABSENCE_YN = 'N'
GROUP BY STUDENT_NO,STUDENT_NAME,DEPARTMENT_NAME
HAVING AVG(POINT) >= 4
ORDER BY 1;

WHERE 4 <= (SELECT AVG(POINT) FROM TB_GRADE GROUP BY STUDENT_NO);


---  환경 조경학과 전공과목 학생들의 과목멸 평점
SELECT CLASS_NO,
        CLASS_NAME,
        AVG(POINT)
FROM TB_CLASS
JOIN TB_GRADE
USING(CLASS_NO)
JOIN TB_DEPARTMENT
USING(DEPARTMENT_NO)
WHERE DEPARTMENT_NAME = '환경조경학과'
AND CLASS_TYPE LIKE '전공%'
GROUP BY CLASS_NO,CLASS_NAME;

--최경희 학생과 같은과 학생들의 이름과 주소
SELECT STUDENT_NAME,
        STUDENT_ADDRESS
FROM TB_STUDENT
WHERE DEPARTMENT_NO = (SELECT DEPARTMENT_NO FROM TB_DEPARTMENT
                                            JOIN TB_STUDENT
                                            USING (DEPARTMENT_NO)
                                            WHERE STUDENT_NAME = '최경희');
                                            
                                            
--국어국문학과에서 총 평점이 가장 높은 학생의 이름과 학번
SELECT STUDENT_NO,STUDENT_NAME,평점
FROM (SELECT STUDENT_NO,STUDENT_NAME,AVG(POINT) AS 평점
        FROM TB_GRADE
        JOIN TB_STUDENT
        USING(STUDENT_NO)
        WHERE STUDENT_NO IN (SELECT STUDENT_NO FROM TB_STUDENT JOIN TB_DEPARTMENT USING(DEPARTMENT_NO) WHERE DEPARTMENT_NAME = '국어국문학과')
GROUP BY STUDENT_NO,STUDENT_NAME
ORDER BY AVG(POINT) DESC)
WHERE ROWNUM = 1;

--환경조경학과가 속한 계열의 학과들의 학과별 전공과목 평점 

SELECT * FROM TB_DEPARTMENT;

SELECT * FROM TB_GRADE
WHERE STUDENT_NO IN (SELECT STUDENT_NO FROM TB_STUDENT JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
                    WHERE CATEGORY = (SELECT CATEGORY FROM TB_DEPARTMENT WHERE DEPARTMENT_NAME = '환경조경학과'));

SELECT DEPARTMENT_NAME AS "계열 학과명" , ROUND(AVG(POINT),1) AS "전공평점" FROM TB_GRADE
JOIN TB_STUDENT
USING(STUDENT_NO)
JOIN TB_DEPARTMENT
USING(DEPARTMENT_NO)
WHERE STUDENT_NO IN (SELECT STUDENT_NO FROM TB_STUDENT JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
                    WHERE CATEGORY = (SELECT CATEGORY FROM TB_DEPARTMENT WHERE DEPARTMENT_NAME = '환경조경학과'))
GROUP BY DEPARTMENT_NAME;

----------4-----------------
--1)
CREATE TABLE TB_CATEGORY (
        NAME VARCHAR2(10),
        USE_YN CHAR(1) DEFAULT 'Y'
);
--2)
CREATE TABLE TB_CLASS_TYPE(
    NO VARCHAR2(5) PRIMARY KEY,
    NAME VARCHAR2(10)
);
--3)
ALTER TABLE TB_CATEGORY MODIFY NAME PRIMARY KEY;
--4)
ALTER TABLE TB_CLASS_TYPE MODIFY NAME NOT NULL;
--5)
ALTER TABLE TB_CLASS_TYPE MODIFY NO VARCHAR2(10) MODIFY NAME VARCHAR2(20);
ALTER TABLE TB_CATEGORY MODIFY NAME VARCHAR2(20);
--6)
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NO TO CLASS_TYPE_NO;
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NAME TO CLASS_TYPE_NAME;
ALTER TABLE TB_CATEGORY RENAME COLUMN NAME TO CATEGORY_NAME;
--7)
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN CLASS_TYPE_NO TO PK_CLASS_TYPE_NO;
ALTER TABLE TB_CATEGORY RENAME COLUMN CATEGORY_NAME TO PK_CATEGORY_NAME;
--8)
INSERT INTO TB_CATEGORY VALUES('공학','Y');
INSERT INTO TB_CATEGORY VALUES('자연과학','Y');
INSERT INTO TB_CATEGORY VALUES('의학','Y');
INSERT INTO TB_CATEGORY VALUES('예체능','Y');
INSERT INTO TB_CATEGORY VALUES('인문사회','Y');

COMMIT;
--9)
ALTER TABLE TB_DEPARTMENT ADD CONSTRAINT FK_DEPARTMENT_CATEGORY FOREIGN KEY (CATEGORY)  REFERENCES TB_CATEGORY (PK_CATEGORY_NAME);
--10)
GRANT CREATE VIEW TO C##TEST;

CREATE VIEW VW_학생일반정보 AS (SELECT STUDENT_NO,
        STUDENT_NAME,
        STUDENT_ADDRESS
FROM TB_STUDENT);

--11) ----------------------------------------------------보류
CREATE VIEW VW_지도면담 AS (SELECT A.STUDENT_NAME,
        A.STUDENT_NO,
        C.PROFESSOR_NAME,
        A.DEPARTMENT_NO
FROM TB_STUDENT A 
LEFT OUTER JOIN TB_PROFESSOR C
ON A.COACH_PROFESSOR_NO = C.PROFESSOR_NO
JOIN TB_DEPARTMENT B
ON A.DEPARTMENT_NO = B.DEPARTMENT_NO);

--12) ---------------------보류
SELECT DEPARTMENT_NAME
FROM TB_DEPARTMENT;

--13)
SELECT * FROM VW_학생일반정보;

UPDATE VW_학생일반정보
SET STUDENT_NAME = '전수환'
WHERE STUDENT_NO = 'A213046';

--14)
CREATE VIEW VW_학생일반정보 AS (SELECT STUDENT_NO,
        STUDENT_NAME,
        STUDENT_ADDRESS
FROM TB_STUDENT)
WITH READ ONLY;

--15)
SELECT SUBSTR(TERM_NO,1,4) FROM TB_GRADE;

SELECT CLASS_NO,CLASS_NAME,COUNT(*) AS 누적수강생
FROM TB_GRADE
JOIN TB_CLASS
USING(CLASS_NO)
WHERE SUBSTR(TERM_NO,1,4) BETWEEN (SELECT MAX(SUBSTR(TERM_NO,1,4))-3 FROM TB_GRADE) AND (SELECT MAX(SUBSTR(TERM_NO,1,4)) FROM TB_GRADE)
GROUP BY CLASS_NO,CLASS_NAME
ORDER BY 누적수강생 DESC;

SELECT CLASS_NO AS 과목번호,
        CLASS_NAME AS 과목이름,
        누적수강생
FROM (SELECT CLASS_NO,CLASS_NAME,COUNT(*) AS 누적수강생
FROM TB_GRADE
JOIN TB_CLASS
USING(CLASS_NO)
WHERE SUBSTR(TERM_NO,1,4) BETWEEN (SELECT MAX(SUBSTR(TERM_NO,1,4))-2 FROM TB_GRADE) AND (SELECT MAX(SUBSTR(TERM_NO,1,4)) FROM TB_GRADE)
GROUP BY CLASS_NO,CLASS_NAME
ORDER BY 누적수강생 DESC)
WHERE ROWNUM < 4;

SELECT 과목번호, 과목이름, "누적수강생수(명)"
FROM (SELECT CLASS_NO 과목번호, CLASS_NAME 과목이름, COUNT(*) "누적수강생수(명)"
      FROM TB_GRADE
           JOIN TB_CLASS USING(CLASS_NO)
      WHERE TERM_NO LIKE '2009%'
            OR TERM_NO LIKE '2008%'
            OR TERM_NO LIKE '2007%'
      GROUP BY CLASS_NO, CLASS_NAME
      ORDER BY 3 DESC)
WHERE ROWNUM <= 3;

------5--------

INSERT INTO TB_CLASS_TYPE VALUES(01,'전공필수');
INSERT INTO TB_CLASS_TYPE VALUES(02,'전공선택');
INSERT INTO TB_CLASS_TYPE VALUES(03,'교양필수');
INSERT INTO TB_CLASS_TYPE VALUES(04,'교양선택');
INSERT INTO TB_CLASS_TYPE VALUES(05,'논문지도');

--2)
CREATE TABLE TB_학생일반정보 AS(
    SELECT STUDENT_NO,STUDENT_NAME,STUDENT_ADDRESS FROM TB_STUDENT
);

--3)
CREATE TABLE TB_국어국문학과 AS (
    SELECT STUDENT_NO,
            STUDENT_NAME,
            EXTRACT(YEAR FROM TO_DATE(SUBSTR(STUDENT_SSN,1,2),'RRRR')) AS 출생년도,
            PROFESSOR_NAME
    FROM TB_STUDENT
    JOIN TB_PROFESSOR
    ON COACH_PROFESSOR_NO = PROFESSOR_NO
);

--4)

UPDATE TB_DEPARTMENT
SET CAPACITY = ROUND(CAPACITY*1.1);

--5)
UPDATE TB_STUDENT
SET STUDENT_ADDRESS = '서울시 종로구 숭인동 181-21'
WHERE STUDENT_NO = 'A413042';


SELECT SUBSTR(STUDENT_SSN,1,6)
FROM TB_STUDENT;
--6)
UPDATE TB_STUDENT
SET STUDENT_SNN = SUBSTR(STUDENT_SSN,1,6)

--7)
UPDATE TB_GRADE
SET POINT = 3.5
WHERE STUDENT_NO = (SELECT STUDENT_NO FROM TB_STUDENT WHERE STUDENT_NAME = '김명훈')
AND TERM_NO = 200501
AND CLASS_NO = (SELECT CLASS_NO FROM TB_CLASS WHERE CLASS_NAME = '피부생리학');

--8)
DELETE TB_GRADE
WHERE STUDENT_NO IN (SELECT STUDENT_NO FROM TB_STUDENT WHERE ABSENCE_YN ='Y');
